{"version":3,"sources":["index.js"],"names":["SingletonI18n","constructor","options","_create","_options","applyDefaultOptions","defaults","messages","defaultLocale","requestReadLocaleFrom","header","query","body","translate","keyref","locale","getDefaultLocale","trim","includes","translated","objectValueFromStr","doFallback","translateDefault","console","warn","strKey","obj","val","undefined","split","reduce","o","i","err","error","middleware","req","res","next","i18nApi","readLocaleFromReq","opt","headers","searchOnReq","length","pop","t","i18n","setOptions","module","exports"],"mappings":";AAgHA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAjGA,MAAMA,EAEJC,YAAaC,GACJC,OAAAA,QAAQD,GAGjBC,QAASD,EAAU,IACXE,MAAAA,EAEGC,SAAoBH,GAWfI,OAAAA,EAAAA,EAAAA,GAVK,CACfC,SAAU,GACVC,cAAe,GACfC,sBAAuB,CACrBC,OAAQ,uBACRC,MAAO,SACPC,KAAM,YAIeV,GAbVG,CAAoBH,GAoB5BW,SAAAA,EAAWC,EAAQC,EAASC,oBAC/B,IAACF,GAA4B,iBAAXA,GAAuBA,EAAOG,OAAOC,SAAS,KAC3DJ,OAAAA,EAGHK,MAAAA,EAAaC,KAAsBL,KAAUD,IAAUV,EAASG,UAG/Dc,OAFaF,GAAcJ,IAAWC,mBAEzBM,EAAiBR,GAAWK,GAAcL,EAGvDQ,SAAAA,EAAkBR,GAGlBD,OAFPU,QAAQC,mBAAmBT,UAAUD,iDAE9BD,EAAUC,GAGVM,SAAAA,EAAmBK,EAAQC,GAC9BC,IAAAA,OAAMC,EAEN,IACFD,EAAMF,EACHI,MAAM,KACNC,OAAO,CAACC,EAAGC,IAAMD,EAAEC,GAAIN,GAC1B,MAAOO,GACPV,QAAQW,MAAMD,GAGTN,OAAAA,EAiCF,MAAA,CACLQ,WAlBOA,SAAWC,EAAKC,EAAKC,GACtBvB,MAEAwB,EAAU,CACdxB,OAjBKyB,SAAkBJ,GACnBK,MAAAA,EAAMrC,EAASK,sBAEjBM,IAAAA,EAASqB,EAAIM,QAAQD,EAAI/B,QACzBiC,EAAc,SAAUF,EAAI7B,gBAAiB6B,EAAI9B,SAE/C,MAACI,GAAU4B,EAAYC,QAC3B7B,EAASK,EAAmBuB,EAAYE,MAAOT,GAG1CrB,OAAAA,EAIQyB,CAAkBJ,IAAQpB,mBAKvC8B,EAAC,CAAChC,EAAQC,IACDF,EAAUC,EAAQC,IAI7BqB,EAAIW,KAAOR,EACXF,EAAIU,KAAOR,EAEXD,KAKAU,WAnEOA,SAAY9C,GACPE,OAAAA,EAAAA,EAAAA,GAAAA,GAAZ,GAAA,CAAsBF,QAAAA,KAmEtB4C,EAAGjC,EACHE,OAAQC,mBAKdiC,OAAOC,QAAUhD,CAAAA,GAAW,IAAIF,EAAcE","file":"index.js","sourceRoot":"../pkg","sourcesContent":["/**\n * This is a dead simple internationalization module for Express.\n * It is intended to be used on REST APIs. Check the GitHub repo\n * for further information.\n *\n * You may have noticed that there is a class which wraps all\n * the application. The idea here is that when we run this file, \n * it will run once, create the new instance of the i18n, and save \n * it in the cache. That means that Node JS will automatically \n * handle exporting the same instance of the i18n to every other \n * module that wants to consume it, so we have a singleton for free.\n * \n * @author Felippe Regazio\n * @github https://github.com/felippe-regazio/express-rest-i18n\n */\nclass SingletonI18n {\n\n  constructor (options) {\n    return _create(options);\n  }\n\n  _create (options = {}) {\n    const _options = applyDefaultOptions(options);\n  \n    function applyDefaultOptions(options) {\n      const defaults = {\n        messages: {},\n        defaultLocale: '',\n        requestReadLocaleFrom: {\n          header: 'application-language',\n          query: 'locale',\n          body: 'locale',\n        }\n      };\n  \n      return { ...defaults, ...options }\n    }\n  \n    function setOptions (options) {\n      return { ..._options, options };\n    }\n  \n    function translate (keyref, locale = getDefaultLocale()) {\n      if (!keyref || typeof keyref !== 'string' || keyref.trim().includes(' ')) {\n        return keyref;\n      }\n      \n      const translated = objectValueFromStr(`${locale}.${keyref}`, _options.messages);\n      const doFallback = !translated && locale !== getDefaultLocale();\n    \n      return doFallback ? translateDefault(keyref) : (translated || keyref);\n    }\n    \n    function translateDefault (keyref) {\n      console.warn(`i18n: key \"${locale}.${keyref}\" retrieved from default locale as fallback.`);\n      \n      return translate(keyref);\n    }\n  \n    function objectValueFromStr(strKey, obj) {\n      let val = undefined;\n  \n      try {\n        val = strKey\n          .split('.')\n          .reduce((o, i) => o[i], obj);\n      } catch (err) {\n        console.error(err);\n      };\n  \n      return val;\n    }\n  \n    function readLocaleFromReq(req) {\n      const opt = _options.requestReadLocaleFrom;\n      \n      let locale = req.headers[opt.header];\n      let searchOnReq = [ `body.${opt.body}`, `query.${opt.query}` ];\n  \n      while(!locale || searchOnReq.length) {\n        locale = objectValueFromStr(searchOnReq.pop(), req);\n      }\n  \n      return locale;\n    }\n    \n    function middleware(req, res, next) {\n      const locale = readLocaleFromReq(req) || getDefaultLocale();\n    \n      const i18nApi = {\n        locale,\n  \n        t(keyref, locale) {\n          return translate(keyref, locale);\n        }\n      };\n    \n      req.i18n = i18nApi;\n      res.i18n = i18nApi;\n    \n      next();\n    }\n    \n    return {\n      middleware,\n      setOptions,\n      t: translate,\n      locale: getDefaultLocale,\n    };\n  }\n}\n\nmodule.exports = options => new SingletonI18n(options);"]}